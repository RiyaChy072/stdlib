/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var broadcastArray = require( '@stdlib/array/base/broadcast-array' );


// MAIN //

/**
* Applies a quinary callback to elements in five broadcasted input arrays and assigns results to elements in a five-dimensional nested output array.
*
* @param {ArrayLikeObject<Array<Collection>>} arrays - array-like object containing five input nested arrays and one output nested array
* @param {ArrayLikeObject<NonNegativeIntegerArray>} shapes - array shapes
* @param {Callback} fcn - quinary callback
* @returns {void}
*
* @example
* var ones5d = require( '@stdlib/array/base/ones5d' );
* var zeros5d = require( '@stdlib/array/base/zeros5d' );
* var add = require( '@stdlib/math/base/ops/add5' );
*
* var shapes = [
*     [ 1, 1, 1, 1, 2 ], 
*     [ 1, 1, 2, 1, 1 ],
*     [ 1, 1, 1, 2, 1 ],
*     [ 2, 2, 2, 1, 2 ],
*     [ 2, 2, 2, 2, 2 ],
*     [ 2, 2, 2, 2, 2 ]
* ];
*
* var x = ones5d( shapes[ 0 ] );
* var y = ones5d( shapes[ 1 ] );
* var z = ones5d( shapes[ 2 ] );
* var w = ones5d( shapes[ 3 ] );
* var v = ones5d( shapes[ 4 ] );
* var out = zeros5d( shapes[ 5 ] );
*
* bquinary5d( [ x, y, z, w, v, out ], shapes, add );
*
* console.log( out );
* // => [ [ [ [ [ 2.0, 2.0 ], [ 2.0, 2.0 ] ], [ [ 2.0, 2.0 ], [ 2.0, 2.0 ] ] ] ] ]
*/
function bquinary5d( arrays, shapes, fcn ) {
	var dx0;
	var dx1;
    var dx2;
    var dx3;
    var dx4;
	var dy0;
	var dy1;
    var dy2;
    var dy3;
    var dy4;
	var dz0;
	var dz1;
    var dz2;
    var dz3;
    var dz4;
	var dw0;
	var dw1;
    var dw2;
    var dw3;
    var dw4;
	var du0;
	var du1;
    var du2;
    var du3;
    var du4;
	var S0;
	var S1;
    var S2;
    var S3;
    var S4;
	var i0;
	var i1;
    var i2;
    var i3;
    var i4;
	var j0;
	var j1;
    var j2;
    var j3;
    var j4;
	var k0;
	var k1;
    var k2;
    var k3;
    var k4;
	var m0;
	var m1;
    var m2;
    var m3;
    var m4;
	var n0;
	var n1;
    var n2;
    var n3;
    var n4;
	var p0;
	var p1;
    var p2;
    var p3;
    var p4;
	var x0;
	var y0;
	var z0;
	var w0;
	var u0;
	var v0;
	var sh;
	var st;
	var o;
	var x;
	var y;
	var z;
	var w;
	var u;
	var v;

	sh = shapes[ 5 ];
	S0 = sh[ 4 ];
	S1 = sh[ 3 ];
    S2 = sh[ 2 ];
    S3 = sh[ 1 ];
    S4 = sh[ 0 ];
	if ( S0 <= 0 || S1 <= 0 || S2 <= 0 || S3 <= 0 || S4 <= 0 ) {
		return;
	}
	o = broadcastArray( arrays[ 0 ], shapes[ 0 ], sh );
	x = o.data;
	st = o.strides;
	dx0 = st[ 4 ];
	dx1 = st[ 3 ];
    dx2 = st[ 2 ];
    dx3 = st[ 1 ];
    dx4 = st[ 0 ]; 

	o = broadcastArray( arrays[ 1 ], shapes[ 1 ], sh );
	y = o.data;
	st = o.strides;
	dy0 = st[ 4 ];
	dy1 = st[ 3 ];
    dy2 = st[ 2 ];
	dy3 = st[ 1 ];
    dy4 = st[ 0 ];

	o = broadcastArray( arrays[ 2 ], shapes[ 2 ], sh );
	z = o.data;
	st = o.strides;
	dz0 = st[ 4 ];
	dz1 = st[ 3 ];
    dz2 = st[ 2 ];
	dz3 = st[ 1 ];
    dz4 = st[ 0 ];

	o = broadcastArray( arrays[ 3 ], shapes[ 3 ], sh );
	w = o.data;
	st = o.strides;
	dw0 = st[ 4 ];
	dw1 = st[ 3 ];
    dw2 = st[ 2 ];
	dw3 = st[ 1 ];
    dw4 = st[ 0 ];

	o = broadcastArray( arrays[ 4 ], shapes[ 4 ], sh );
	u = o.data;
	st = o.strides;
	du0 = st[ 4 ];
	du1 = st[ 3 ];
    du2 = st[ 2 ];
	du3 = st[ 1 ];
    du4 = st[ 0 ];

	v = arrays[ 5 ];

    j4 = 0; 
    k4 = 0; 
    m4 = 0; 
    n4 = 0; 
    p4 = 0;
    for ( i4 = 0; i4 < S4; i4++ ) { 
        j3 = 0; 
        k3 = 0; 
        m3 = 0; 
        n3 = 0; 
        p3 = 0; 
        x0 = x[ j4 ]; 
        y0 = y[ k4 ]; 
        z0 = z[ m4 ]; 
        w0 = w[ n4 ]; 
        u0 = u[ p4 ]; 
        v0 = v[ i4 ]; 
        for ( i3 = 0; i3 < S3; i3++ ) { 
            j2 = 0; 
            k2 = 0; 
            m2 = 0; 
            n2 = 0; 
            p2 = 0; 
            x0 = x0[ j3 ]; 
            y0 = y0[ k3 ]; 
            z0 = z0[ m3 ]; 
            w0 = w0[ n3 ]; 
            u0 = u0[ p3 ]; 
            v0 = v0[ i3 ]; 
            for ( i2 = 0; i2 < S2; i2++ ) { 
                j1 = 0; 
                k1 = 0; 
                m1 = 0; 
                n1 = 0; 
                p1 = 0; 
                x0 = x0[ j2 ]; 
                y0 = y0[ k2 ]; 
                z0 = z0[ m2 ]; 
                w0 = w0[ n2 ]; 
                u0 = u0[ p2 ]; 
                v0 = v0[ i2 ]; 
                for ( i1 = 0; i1 < S1; i1++ ) { 
                    j0 = 0; 
                    k0 = 0; 
                    m0 = 0; 
                    n0 = 0; 
                    p0 = 0; 
                    x0 = x0[ j1 ]; 
                    y0 = y0[ k1 ]; 
                    z0 = z0[ m1 ]; 
                    w0 = w0[ n1 ]; 
                    u0 = u0[ p1 ]; 
                    v0 = v0[ i1 ]; 
                    for ( i0 = 0; i0 < S0; i0++ ) { 
                        v0[ i0 ] = fcn( x0[ j0 ], y0[ k0 ], z0[ m0 ], w0[ n0 ], u0[ p0 ] ); 
                        j0 += dx0; 
                        k0 += dy0;
                        m0 += dz0;
                        n0 += dw0;
                        p0 += du0;
                    }
                    j1 += dx1; 
                    k1 += dy1;
                    m1 += dz1;
                    n1 += dw1;
                    p1 += du1;    
                }
                j2 += dx2; 
                k2 += dy2;
                m2 += dz2;
                n2 += dw2;
                p2 += du2; 
            }
            j3 += dx3; 
            k3 += dy3;
            m3 += dz3;
            n3 += dw3;
            p3 += du3;  
        }
        j4 += dx4; 
        k4 += dy4;
        m4 += dz4;
        n4 += dw4;
        p4 += du4;    
    }                            
}


// EXPORTS //

module.exports = bquinary5d;
